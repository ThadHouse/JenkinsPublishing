plugins {
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
}

apply plugin: 'maven-publish'
apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'DEV'
    }
}


def finder = new FileNameFinder()

def pubVersion = '3.2.0'

ext.getClassifier = { f->
    def file = f.toString()
    def classifier = file.substring(file.indexOf('-classifier--') + '-classifier--'.length())
    return classifier.substring(0, classifier.indexOf('.'))
}

def cppFiles = files(finder.getFileNames(new File(projectDir, 'build').absolutePath, '**/cppZip-classifier--*.zip'))

def jniFiles = files(finder.getFileNames(new File(projectDir, 'build').absolutePath, '**/jniJar-classifier--*.jar'))

def jarFile = file("$buildDir/java.jar")
def jarSources =file("$buildDir/java-sources.jar")

def headerFile = file("$buildDir/headers.zip")

def baseArtifactId = 'opencv'

def artifactGroupId = 'org.opencv'

def allOutput = file('outputs')

def allZipTask = project.tasks.create("ntcoreAllCppZip", Zip) {
    description = 'Creates a zip with all ntcore cpp artifacts'
    classifier = 'all'
    baseName = 'ntcore'
    destinationDir = allOutput
    duplicatesStrategy = 'exclude'

    cppFiles.each {
        from project.zipTree(it)
    }
}

def allJniTask = project.tasks.create("ntcoreAllJNIJar", Jar) {
    description = 'Creates a jar with all ntcore jni artifacts'
    classifier = 'all'
    baseName = 'ntcoreJNI'
    destinationDir = allOutput
    duplicatesStrategy = 'exclude'

    jniFiles.each {
        from project.zipTree(it)
    }
}


publishing {
    publications {
      java(MavenPublication) {
        artifact jarFile
        artifact (jarSources) {
          classifier 'sources'
        }

          artifactId = "${baseArtifactId}-java"
            groupId artifactGroupId
            version pubVersion
      }

      cpp(MavenPublication) {
            artifact (headerFile) {
                classifier = 'headers'
            }

            cppFiles.each { file->
                artifact (file) {
                    classifier = getClassifier(file)
                }
            }

            artifact allZipTask

            artifactId = "${baseArtifactId}-cpp"
            groupId artifactGroupId
            version pubVersion
        }
        jni(MavenPublication) {
            jniFiles.each { file->
                artifact (file) {
                    classifier = getClassifier(file)
                }
            }

            artifact allJniTask

            artifactId = "${baseArtifactId}-jni"
            groupId artifactGroupId
            version pubVersion
        }
    }
}
